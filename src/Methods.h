/*! This is the methods container that contains the most methods for the RESILIENT.*/

#ifndef _RESILIENT_Methods_
#define _RESILIENT_Methods_

#include "Headers.h"
#include "AveragingOrientation.h"
#include "FiberOrientation.h"
#include <vtkMatrix3x3.h>

class Methods {
public:
	static void init(DataFormat &data);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, Material::Mat inMaterial1, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, Material::Mat inMaterial1, Material::Mat inMaterial2, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, Material::Mat inMaterial4, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, Material::Mat inMaterial4, Material::Mat inMaterial5, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearch(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, Material::Mat inMaterial4, Material::Mat inMaterial5, Material::Mat inMaterial6, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearchNearToPath(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, vtkSmartPointer<vtkIdList> corrPath, std::string atrium);
	static vtkSmartPointer<vtkIdList> pathSearchOverPlane(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, std::vector<double> planePoint);
	static void pathMarker(DataFormat &data, vtkSmartPointer<vtkIdList> path);
	static void pathMarker(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial);
	static void pathMarker(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static void pathMarker(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3);
	static void pathMarkerRing(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial);
	static void pathMarkerRing(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static void smoothingPath(DataFormat &data, vtkSmartPointer<vtkIdList> path);
	static void smoothingRingPath(DataFormat &data, vtkSmartPointer<vtkIdList> path);
	static vtkSmartPointer<vtkIdList> growPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double widthInMM);
	static vtkSmartPointer<vtkIdList> growPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double widthInMM, Material::Mat outMaterial, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> growPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double widthInMM, Material::Mat outMaterial, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkSmartPointer<vtkIdList> growPathInLeft(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width);
	static vtkSmartPointer<vtkIdList> growPathInRight(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width);
	static vtkSmartPointer<vtkIdList> growPathThroughLayerInRegion(DataFormat &data, vtkSmartPointer<vtkIdList> path, std::set<vtkIdType> region, double widthInMM, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkSmartPointer<vtkIdList> growPathEndoInSurface(DataFormat &data, vtkSmartPointer<vtkIdList> path, double widthInMM, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkSmartPointer<vtkIdList> growPathfromEndo(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> growPathfromEndo(DataFormat &data, vtkSmartPointer<vtkIdList> orgPath, double width, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkSmartPointer<vtkIdList> growBetweenPecti(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, std::vector<double> planePoint, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> growBetweenPecti(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, std::vector<double> planePoint, Material::Mat inMaterial, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> growCTPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double minRadius, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3);
	static double round(double figure, int digits);
	static double pathLength(DataFormat &data, vtkSmartPointer<vtkIdList> path);
	static vtkIdType pointIdAtPercentOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double percent);
	static vtkIdType pointIdAtMMOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double distance);
	static std::vector<double> pointAtPercentOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double percent);
	static std::vector<double> pointAtMMOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double distance);
	static vtkSmartPointer<vtkIdList> getPercentOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double percent);
	static vtkSmartPointer<vtkIdList> getMMOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double distance);
	static vtkSmartPointer<vtkIdList> getMMInverseOfPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double distance);
	static vtkSmartPointer<vtkIdList> inversePath(vtkSmartPointer<vtkIdList> path);
	static vtkSmartPointer<vtkIdList> subPathFromPath(vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2);
	static vtkSmartPointer<vtkIdList> add2Paths(vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2);
	static vtkSmartPointer<vtkIdList> add3Paths(vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, vtkSmartPointer<vtkIdList> path3);
	static vtkSmartPointer<vtkIdList> add4Paths(vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, vtkSmartPointer<vtkIdList> path3, vtkSmartPointer<vtkIdList> path4);
	static vtkSmartPointer<vtkIdList> add5Paths(vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, vtkSmartPointer<vtkIdList> path3, vtkSmartPointer<vtkIdList> path4, vtkSmartPointer<vtkIdList> path5);
	static std::vector<double> angle(double x, double y, double z);
	static double angleBetween2Vectors(std::vector<double> vector1, std::vector<double> vector2);
	static void setThetaPhi(DataFormat &data);
	static vtkIdType isIDInsideArrayLinear(vtkSmartPointer<vtkDataArray> array, vtkIdType search);
	static vtkSmartPointer<vtkIdList> boundaryLayerAppend(DataFormat &data, vtkSmartPointer<vtkIdList> path, std::vector<double> point);
	static std::vector<double> getPointAlongPathOfPointInMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, int inMaterial1, int inMaterial2, double offsetMin, double offsetMax);
	static std::vector<double> getPointAlongPathOfPointInMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, int inMaterial1, double minDistanzinMaterial);
	static std::vector<double> getPointAlongPathOfPointInMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, int inMaterial1, int inMaterial2, double minDistanzinMaterial);
	static vtkSmartPointer<vtkIdList> growPathtoPoint(DataFormat &data, vtkSmartPointer<vtkIdList> border, std::vector<double> point, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> growPathtoPoint(DataFormat &data, vtkSmartPointer<vtkIdList> border, std::vector<double> point, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkSmartPointer<vtkIdList> growVeinInRegion(DataFormat &data, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat materialVein, std::vector<double> distancePoint, vtkSmartPointer<vtkIdList> regionList);
	static vtkSmartPointer<vtkIdList> growVeinInRegionOneSurface(DataFormat &data, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat materialVein, std::vector<double> distancePoint, double distanceEndoEpi, vtkSmartPointer<vtkIdList> regionList);
	static vtkSmartPointer<vtkIdList> growPathInRegion(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial1, Material::Mat inMaterial2, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> growPathInRegion(DataFormat &data, vtkSmartPointer<vtkIdList> path, vtkSmartPointer<vtkIdList> region, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkSmartPointer<vtkIdList> growPathInRegion(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, Material::Mat inMaterial1, Material::Mat inMaterial2, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> regionInterpolateBetween2Path(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial, std::string atrium);
	static vtkSmartPointer<vtkIdList> regionInterpolateBetween2Path(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, std::string atrium);
	static vtkSmartPointer<vtkIdList> regionInterpolateBetween2PathwithSeed(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> regionInterpolateBetween2PathwithSeed(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> regionGrowBetween2PathwithDifferentOrientationInDirectionAndNotInDirection(
		DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial, std::vector<double> seedPoint, std::vector<double> point1Plane1, std::vector<double> point2Plane1, std::vector<double> point3Plane1, std::vector<double> directionPoint, std::vector<double> point1Plane2, std::vector<double> point2Plane2, std::vector<double> point3Plane2, std::vector<double> directionPoint2);
	static vtkSmartPointer<vtkIdList> regionGrowBetween2PathwithSeed(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> regionGrow(DataFormat &data, std::vector<double> seedPoint);
	static vtkSmartPointer<vtkIdList> regionGrowOneSurface(DataFormat &data, std::vector<double> seedPoint, double distanceEndoEpi);
	static vtkSmartPointer<vtkIdList> regionInterpolateBetween2PathsInDirection(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial, std::vector<double> seedPoint, std::vector<double> pointPlane1, std::vector<double> pointPlane2, std::vector<double> pointPlane3, std::vector<double> directionPoint);
	static void setMaterialNotinDirection(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial, Material::Mat inMaterial, std::vector<double> pointPlane1, std::vector<double> pointPlane2, std::vector<double> pointPlane3, std::vector<double> directionPoint);
	static void setMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, const char *cellArray, int setMaterial);
	static void setMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial);
	static void setMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial, Material::Mat inMaterial);
	static void setMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, int setMaterial, Material::Mat inMaterial);
	static void setMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static void setMaterial(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3);
	static void setMaterialinLeft(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial);
	static void setMaterialinRight(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat setMaterial);
	static void setMaterialinInMaterialNotinDirectionandDirection(DataFormat &data, Material::Mat setMaterial, Material::Mat inMaterial, std::vector<double> point1Plane1, std::vector<double> point2Plane1, std::vector<double> point3Plane1, std::vector<double> directionPointPlane1, std::vector<double> point1Plane2, std::vector<double> point2Plane2, std::vector<double> point3Plane, std::vector<double> directionPointPlane2, std::vector<double> seedPoint);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, Material::Mat inMaterial4, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, double percent, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, Material::Mat inMaterial2, double percent, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, double percent, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, double percent, std::string atrium);
	static std::vector<double> getSeedPoint(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, Material::Mat inMaterial4, double percent, std::string atrium);
	static void setStatus(DataFormat &data, vtkSmartPointer<vtkIdList> path, int status, Material::Mat inMaterial);
	static void setStatus(DataFormat &data, vtkSmartPointer<vtkIdList> path, int status, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static std::vector<double> getCentroidandBounds(DataFormat &data, vtkSmartPointer<vtkIdList> path);
	static std::vector<double> getCentroid(DataFormat &data, vtkSmartPointer<vtkIdList> path);
	static void uncoupleMaterials(DataFormat &data, Material::Mat uncoupleMaterial, Material::Mat uncoupleMaterial2, Material::Mat uncoupleMaterial2b);
	static void uncoupleMaterials(DataFormat &data, Material::Mat uncoupleMaterial1, Material::Mat uncoupleMaterial1b, Material::Mat uncoupleMaterial2, Material::Mat uncoupleMaterial2b);
	static double getMaxDistance(DataFormat &data, vtkSmartPointer<vtkIdList> path, std::vector<double> point);
	static double DistanceBetweenEndoandEpiSurfaceAlongPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, std::string distance);
	static vtkSmartPointer<vtkIdList> getCellNeighbours(DataFormat &data, vtkIdType cellID);
	static vtkSmartPointer<vtkIdList> getAllCellNeighbours(DataFormat &data, vtkIdType cellID);
	static vtkSmartPointer<vtkIdList> getCellsinRadius(DataFormat &data, vtkIdType cellID, double radius);
	static vtkSmartPointer<vtkIdList> getCellsinRadius(DataFormat &data, std::vector<double> point, double radius);
	static bool isPointinMaterial(DataFormat &data, std::vector<double> point, Material::Mat inMaterial);
	static std::vector<double> findClosedPointinMaterialwithoutOrientation(DataFormat &data, std::vector<double> point, Material::Mat inMaterial);
	static std::vector<double> findClosedPointinMaterialwithoutOrientation(DataFormat &data, std::vector<double> point, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static std::vector<double> findClosedPointinMaterialinRadius(DataFormat &data, std::vector<double> point, Material::Mat inMaterial, double radius);
	static std::vector<double> findClosedPointinMaterialinRadius(DataFormat &data, std::vector<double> point, Material::Mat inMaterial1, Material::Mat inMaterial2, double radius);
	static vtkIdType findClosedCellIdinDirectionPoint(DataFormat &data, std::vector<double> point, std::vector<double> toPoint, double radius);
	static std::vector<double> findClosedPointinMaterialinDirectionPoint(DataFormat &data, std::vector<double> point, std::vector<double> toPoint, double minDistance, Material::Mat inMaterial1);
	static std::vector<double> findClosedPointinMaterialinDirectionPoint(DataFormat &data, std::vector<double> point, std::vector<double> toPoint, double minDistance, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static std::vector<double> findClosedPointinMaterial(DataFormat &data, std::vector<double> point, Material::Mat inMaterial);
	static std::vector<double> findClosedPointinMaterial(DataFormat &data, std::vector<double> point, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static std::vector<double> findClosedPointOnPath(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> path);
	static std::vector<double> findFurthestPointinMaterialtoPoint(DataFormat &data, std::vector<double> point, std::vector<double> toPoint, Material::Mat inMaterial, double radius);
	static std::vector<double> findClosedPointinMaterialinRadiustoPointLeft(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, double radius, double resolution);
	static std::vector<double> findClosedPointinMaterialinRadiustoPointRight(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, double radius, double resolution);
	static bool isVein(DataFormat &data, std::vector<double> point1, std::vector<double> point2, std::vector<double> point3, std::vector<double> centroid, std::vector<double> refPoint, double radius, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static std::vector<double> getOuterVeinCentrepoint(std::vector<double> point1, std::vector<double> point2, std::vector<double> point3, std::vector<double> centroid, double distanceToCentrepoint);
	static vtkSmartPointer<vtkPoints> movePoints(vtkSmartPointer<vtkPoints> points, std::vector<double> vector);
	static vtkSmartPointer<vtkPoints> rotatePoints(vtkSmartPointer<vtkPoints> points, vtkSmartPointer<vtkMatrix3x3> matrix);
	static std::unordered_map<vtkIdType, vtkIdType> getCommonPoint(DataFormat &data, vtkSmartPointer<vtkIdList> pointList1, vtkSmartPointer<vtkIdList> pointList2);
	static std::unordered_map<vtkIdType, vtkIdType> getCommonPoint(DataFormat &data, vtkSmartPointer<vtkIdList> pointList1, vtkSmartPointer<vtkIdList> pointList2, double tolerance);
	static std::unordered_map<vtkIdType, vtkIdType> getCommonPoints(DataFormat &data, vtkSmartPointer<vtkIdList> cellIdList1, vtkSmartPointer<vtkIdList> cellIdList2);
	static void replacePoints(DataFormat &data, std::unordered_map<vtkIdType, vtkIdType> points);
	static DataFormat createVoxelBox(DataFormat &data, std::vector<double> centrePoint, double x_width, double y_width, double z_width);
	static DataFormat createVoxelTube(DataFormat &data, std::vector<double> startPoint, std::vector<double> targetPoint, double resolution, double radius);
	static DataFormat createVoxelAroundPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double radius);
	static double getResolution(DataFormat &data);
	static vtkSmartPointer<vtkUnstructuredGrid> extractCellsVtu(vtkSmartPointer<vtkPointSet> inputdata, vtkSmartPointer<vtkIdList> cellIDs);
	static vtkSmartPointer<vtkPolyData> extractCellsVtp(vtkSmartPointer<vtkPolyData> inputdata, vtkSmartPointer<vtkIdList> cellIDs);
	static vtkSmartPointer<vtkUnstructuredGrid> calcCellCentroids(vtkSmartPointer<vtkPointSet> inputdata);
	static vtkIdType getPointIdinNewData(vtkSmartPointer<vtkDataSet> newdata, vtkSmartPointer<vtkDataSet> oldData, vtkIdType newPointID);
	static vtkSmartPointer<vtkIdList> getAllCellIds(DataFormat &data);
	static vtkSmartPointer<vtkIdList> getCellsWereNotinOldData(DataFormat &newData, DataFormat &oldData);
	static vtkSmartPointer<vtkIdList> getCellsWereInOldData(DataFormat &newData, DataFormat &oldData);
	static vtkSmartPointer<vtkIdList> getPointsWereInOldData(DataFormat &newData, DataFormat &oldData);
	static vtkSmartPointer<vtkIdList> unionData(DataFormat &oldData, DataFormat &newdata);
	static vtkSmartPointer<vtkPolyData> extractSurface(DataFormat &data);
	static std::vector<double> findClosedPointinMaterialInLeftEpi(DataFormat &data, std::vector<double> point);
	static std::vector<double> findClosedPointinMaterialInLeftEndo(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInLeft(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInLeftEpi(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInLeftEndo(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInRight(DataFormat &data, std::vector<double> point);
	static vtkSmartPointer<vtkMatrix3x3> getRotaionTranslationMatrix(std::vector<double> vector1, std::vector<double> vector2);
	static void cleanCase(DataFormat &data, std::vector<double> point);
	static void endCleanCase(DataFormat &data, std::vector<double> point);
	static DataFormat getPill(std::vector<double> point1, std::vector<double> point2, double resolution, double radius);
	static vtkSmartPointer<vtkPolyData> vtpUnion(vtkSmartPointer<vtkPolyData> data1, vtkSmartPointer<vtkPolyData> data2);
	static vtkSmartPointer<vtkPolyData> vtpDifference(vtkSmartPointer<vtkPolyData> data1, vtkSmartPointer<vtkPolyData> data2);
	static void vtpBridgeMarker(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial, std::vector<double> point1, std::vector<double> point2);
	static DataFormat getPillAroundPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double resolution, double radius);
	static void vtpBridgeMarkerArroundPath(DataFormat &data, DataFormat &oldData, vtkSmartPointer<vtkIdList> path, vtkSmartPointer<vtkIdList> oldPath);
	static vtkSmartPointer<vtkIdList> getCellsArroundPathwithStatusZero(DataFormat &data, vtkSmartPointer<vtkIdList> path, double widthInMM, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> getCellsArroundPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double widthInMM, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> getCellsArroundPath(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, std::string atrium);
	static double distanceBetweenEndoandEpiAtriuminSurface(DataFormat &data, std::string atrium, std::string distance);
	static double calcDistancetoPointinEpi(DataFormat &data, vtkIdType cellId, vtkIdType closestPointId, double distanceEndoEpi);
	static double calcDistancetoPointinEndo(DataFormat &data, vtkIdType cellId, vtkIdType closestPointId, double distanceEndoEpi);
	static vtkSmartPointer<vtkPolyData> triangulateSurface(vtkSmartPointer<vtkPolyData> polydata);
	static vtkSmartPointer<vtkPolyData> smoothSurface(vtkSmartPointer<vtkPolyData> polydata, double smoothIterations);
	static vtkSmartPointer<vtkPolyData> getSurfaceCellNormals(vtkSmartPointer<vtkPolyData> polydata);
	static vtkSmartPointer<vtkPolyData> tubeIntersectionFilter(vtkSmartPointer<vtkPolyData> tube, vtkSmartPointer<vtkPolyData> line, double resolution);
	static vtkSmartPointer<vtkUnstructuredGrid> tetrahedralizeVTPSurface(vtkSmartPointer<vtkPolyData> inputData);
	static vtkSmartPointer<vtkPolyData> closeSurfaceFilter(vtkSmartPointer<vtkPolyData> data);
	static void writeIntermediateData(DataFormat data, std::string filename);
	static vtkSmartPointer<vtkIdList> growPathTransmural(DataFormat &data, vtkSmartPointer<vtkIdList> path1, vtkSmartPointer<vtkIdList> path2, double width, std::string atrium);
	static vtkSmartPointer<vtkIdList> growPathTransmural(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, Material::Mat inMaterial, std::string atrium);
	static vtkSmartPointer<vtkIdList> growPathTransmural(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, Material::Mat inMaterial1, Material::Mat inMaterial2, std::string atrium);
	static vtkSmartPointer<vtkIdList> growPathTransmuralEndo(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, Material::Mat inMaterial);
	static vtkSmartPointer<vtkIdList> growPathTransmuralEndo(DataFormat &data, vtkSmartPointer<vtkIdList> path, double width, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkIdType findClosedPointIdOnPath(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> path);
	static void regionGrowMaterial(DataFormat &data, std::vector<double> seedPoint);
	static void regionGrowMaterial(DataFormat &data, std::vector<double> seedPoint, Material::Mat fromMaterial1, Material::Mat fromMaterial2, Material::Mat inMaterial);
	static void deleteArrays(DataFormat &data);
	static vtkIdType findClosedPointIdOnPathWithoutOrientationInMaterial(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkIdType findClosedPointIdinMaterialwithoutOrientation(DataFormat &data, std::vector<double> point, Material::Mat inMaterial1, Material::Mat inMaterial2);
	static vtkIdType findClosedPointIdinMaterialwithoutOrientation(DataFormat &data, std::vector<double> point, Material::Mat inMaterial1);
	static vtkSmartPointer<vtkIdList> getCellsWhichWereInside(DataFormat &data, DataFormat &insideData);
	static vtkIdType findClosedPointIdinMaterialInLeftInRegion(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> region);
	static vtkIdType findClosedPointIdinMaterialInRightInRegion(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> region);
	static std::vector<double> findClosedPointinMaterialInLeftInRegion(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> region);
	static std::vector<double> findClosedPointinMaterialInRightInRegion(DataFormat &data, std::vector<double> point, vtkSmartPointer<vtkIdList> region);
	static std::vector<double> findClosedPointinMaterialInRightEpi(DataFormat &data, std::vector<double> point);
	static std::vector<double> findClosedPointinMaterialInRightEndo(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInRightEpi(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInRightEndo(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInEpi(DataFormat &data, std::vector<double> point);
	static vtkIdType findClosedPointIdinMaterialInEndo(DataFormat &data, std::vector<double> point);
    static void uncoupleRightFromLeft(DataFormat &data);
	static std::vector<double> getXYZResolution(DataFormat &data);
	static bool hasHoles(vtkSmartPointer<vtkPolyData> surface);
	static void cleanCaseVTP(DataFormat &data, std::vector<double> point1, std::vector<double> point2);
	static vtkSmartPointer<vtkIdList> regionGrowOneSurfaceFreeBridge(DataFormat &data, std::vector<double> seedPoint, double distanceEndoEpi, int freeBridgeMaterial);
	static vtkSmartPointer<vtkIdList> regionGrowFreeBridge(DataFormat &data, std::vector<double> seedPoint, int freeBridgeMaterial);
	static vtkSmartPointer<vtkIdList> growCTPathTransmural(DataFormat &data, vtkSmartPointer<vtkIdList> path, Material::Mat inMaterial1, Material::Mat inMaterial2, Material::Mat inMaterial3, std::string atrium);
	static vtkSmartPointer<vtkIdList> mapPathFromSurfaceToVolume(DataFormat &data, vtkSmartPointer<vtkIdList> path);
}; // class Methods

#endif // ifndef _RESILIENT_Methods_
